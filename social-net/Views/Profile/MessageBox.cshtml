@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using social_net.Data
@model social_net.Models.User
@{
}

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject social_net.Data.AppDbContext _appDbContext;


@if (SignInManager.IsSignedIn(User))
{
    var currentUser = await UserManager.GetUserAsync(User);
    currentUser = await _appDbContext.Users
        .Include(u => u.InitiatedFriendships)
        .ThenInclude(fr => fr.RecipientUser)
        .Include(u => u.ReceivedFriendships)
        .ThenInclude(fr => fr.InitiatorUser)
        .Include(u => u.SentMessages)
        .FirstOrDefaultAsync(u => u.Id.Equals(currentUser.Id));

    if (currentUser != Model && currentUser.Friends.Contains(Model))
    {

        <div class="container mt-4">
            <div class="card shadow-sm p-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h3 class="text-primary mb-0">
                        Conversation with <a asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@Model.Id"
                                             class="text-primary">
                            @Model.FirstName @Model.LastName
                        </a>
                    </h3>
                </div>
            </div>
        </div>
        <section id="messageContainer">
            @{
                var messagesToProfileUser = currentUser.SentMessages.FindAll(msg => msg.ReceiverId == Model.Id).ToList();
                var messagesFromProfileUser = Model.SentMessages.FindAll(msg => msg.ReceiverId == currentUser.Id).ToList();
                var allMessages = messagesToProfileUser.Concat(messagesFromProfileUser).ToList();
                allMessages.Sort((msg1, msg2) => msg1.SentAt.CompareTo(msg2.SentAt));
            }
            <partial name="_MessagePartial" model="allMessages" />
        </section>
        <div class="container mt-4">
            <div class="card shadow-sm p-4">
                <form asp-action="SendMessage" asp-route-currentUserId="@currentUser.Id" asp-route-profileUserId="@Model.Id" method="post">
                    <div class="input-group mb-3">
                        <input id="bottom" class="form-control" name="messageContent" autocomplete="off" placeholder="Type a message...">
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-send-fill"></i> Send
                        </button>
                    </div>
                </form>
            </div>
        </div>
    } else if (currentUser == Model)
    {
        <div class="container mt-4">
            <div class="card shadow-sm p-4 text-center">
                <h1 class="text-danger">Messaging Unavailable</h1>
                <p class="text-muted">You can't send or receive messages from yourself. </p>
            </div>
        </div>
    } else if (!currentUser.Friends.Contains(Model))
    {
        <div class="container mt-4">
            <div class="card shadow-sm p-4 text-center">
                <h1 class="text-danger">Messaging Unavailable</h1>
                <p class="text-muted">
                    To send or receive messages, you need to be friends with <a asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@Model.Id"
                                                                                class="text-decoration-none text-dark">
                        @Model.FirstName @Model.LastName.
                    </a>
                </p>
            </div>
        </div>
    }
}


<style>
    html {
        scroll-behavior: auto !important;
    }
</style>

<script>
    window.onload = () => {
        const el = document.getElementById("bottom");
        if (el) el.scrollIntoView({ behavior: "auto" });
    };
</script>