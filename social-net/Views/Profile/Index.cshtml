@using Microsoft.AspNetCore.Identity
@model social_net.Models.User
@{
}

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

<h1>@Model.FirstName @Model.LastName</h1>
@{
	bool noPostsShown = true;
}

@if (SignInManager.IsSignedIn(User))
{
	var currentUser = await UserManager.GetUserAsync(User);
	if (currentUser == Model)
	{
		<a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Edit Account</a>
		<partial name="_CreatePartial" model="currentUser"/>
	} else
	{
		if (Model.AllFriendships.Any(fr => fr.InitiatorUserId == currentUser.Id || fr.RecipientUserId == currentUser.Id))
		{
			<p> You are friends! </p>
			@* <button class="btn btn-primary" asp-controller="Message" asp-action="Index" asp-route-profileUserId="@Model.Id">Message</button> *@
			<a class="btn btn-primary" asp-action="MessageBox" asp-route-profileUserId="@Model.Id">Message</a>
		}
		else
		{
			if (Model.ReceivedFriendRequests.Any(fr => fr.SenderId == currentUser.Id))
			{
				<p> Ai trimis o cerere de prietenie acestui utilizator. </p>
			}
			else if (Model.SentFriendRequests.Any(fr => fr.ReceiverId == currentUser.Id))
			{
				@* <p> Ai primit o cerere de prietenie de la acest utilizator. </p> *@

				<form asp-action="AcceptFriend" asp-route-profileUserId="@Model.Id" asp-route-currentUserId="@currentUser.Id" method="post">
					<button type="submit" class="btn btn-primary">Accept Friend</button>
				</form>

				<form asp-action="DeclineFriend" asp-route-profileUserId="@Model.Id" asp-route-currentUserId="@currentUser.Id" method="post">
					<button type="submit" class="btn btn-primary">Decline Friend</button>
				</form>
			}
			else
			{
				<form asp-action="AddFriend" asp-route-profileUserId="@Model.Id" asp-route-currentUserId="@currentUser.Id" method="post">
					<button type="submit" class="btn btn-primary">Add Friend</button>
				</form>
			}
		}
	}
	if (User.IsInRole("Admin") || currentUser == Model || Model.HasPublicProfile || Model.Friends.Contains(currentUser))
	{
		@* <partial name="_ProfilePartial" /> *@

		@* var textPosts = await Model.TextPosts.Include(tp => tp.User).ToListAsync(); *@
		@* var photoAlbums = await _appDbContext *@
		@* 	.PhotoAlbums *@
		@* 	.Include(pa => pa.User) *@
		@* 	.Include(pa => pa.Photos) *@
		@* 	.ToListAsync(); *@
		// await _appDbContext.TextPosts.Include(tp => tp.User);

		// var posts = textPosts.Concat(photoAlbums);

		var posts = new List<ViewPostModel>();

		posts.AddRange(Model.TextPosts.Select(tp => new ViewPostModel
					{
						Type = "Text",
						TextPost = tp,
						PostedAt = tp.PostedAt
					}));

		posts.AddRange(Model.PhotoAlbums.Select(pa => new ViewPostModel
					{
						Type = "Photo",
						PhotoAlbum = pa,
						PostedAt = pa.PostedAt
					}));

		var sortedPosts = posts.OrderByDescending(p => p.PostedAt);
		<h1>Posts</h1>
		foreach (var post in sortedPosts)
		{
			noPostsShown = false;
			<partial name="_PostsPartial" model="post" />
		}

	}
}
else if (Model.HasPublicProfile)
{
	@* <partial name="_ProfilePartial" /> *@
	var posts = new List<ViewPostModel>();

	posts.AddRange(Model.TextPosts.Select(tp => new ViewPostModel
				{
					Type = "Text",
					TextPost = tp,
					PostedAt = tp.PostedAt
				}));

	posts.AddRange(Model.PhotoAlbums.Select(pa => new ViewPostModel
				{
					Type = "Photo",
					PhotoAlbum = pa,
					PostedAt = pa.PostedAt
				}));

	var sortedPosts = posts.OrderByDescending(p => p.PostedAt);
	<h1>Posts</h1>

	foreach (var post in sortedPosts)
	{
		noPostsShown = false;
		<partial name="_PostsPartial" model="post" />
	}

} else 
{
	noPostsShown = false;
	<h5>This user has a private profile</h5>
}


@if (noPostsShown)
{
	<h3>This user has no posts</h3>
}