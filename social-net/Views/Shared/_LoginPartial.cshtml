@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using social_net.Models

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject social_net.Data.AppDbContext _appDbContext;


<ul class="navbar-nav">
	@if (SignInManager.IsSignedIn(User))
	{
		var currentUser = await UserManager
			.GetUserAsync(User);

		currentUser = await _appDbContext
			.Users
			.Include(u => u.ReceivedFriendRequests)
			.ThenInclude(fr => fr.Sender)
			.Include(u => u.InitiatedFriendships)
			.Include(u => u.ReceivedFriendships)
			.Include(u => u.Notifications.OrderByDescending(n => n.Id))
			.Include(u => u.GroupMemberships)
			@* .Include(u => u.SentMessages) *@
			@* .Include(u => u.ReceivedMessages) *@
			.FirstOrDefaultAsync(u => u.Id.Equals(currentUser.Id));

		await _appDbContext
			.Friendships
			.Include(f => f.InitiatorUser)
			.Include(f => f.RecipientUser)
			.Where(f => f.InitiatorUserId == currentUser.Id || f.RecipientUserId == currentUser.Id)
			.ToListAsync();

		var allGroups = await _appDbContext
			.Groups
			.Include(g => g.ReceivedMessages)
			.ToListAsync();

		var allSentMessages = await _appDbContext.FriendsMessages.Where(msg => msg.Sender == currentUser).ToListAsync();
		var allReceivedMessages = await _appDbContext.FriendsMessages.Where(msg => msg.Receiver == currentUser).ToListAsync();

		var returnUrl = Context.Request.Path + Context.Request.QueryString;

		Dictionary<String, Dictionary<object, IMessage>> messagesDictionary = new Dictionary<string, Dictionary<object, IMessage>>();
		messagesDictionary["Friends"] = new Dictionary<object, IMessage>();
		messagesDictionary["Groups"] = new Dictionary<object, IMessage>();

		foreach (var friend in currentUser.Friends)
		{
			var messages = allSentMessages
				.Where(m => m.Receiver == friend)
				.Select(m => new { Msg = m, IsSent = true })
				.Concat(
					allReceivedMessages
					.Where(m => m.Sender == friend)
					.Select(m => new { Msg = m, IsSent = false })
				)
				.OrderByDescending(m => m.Msg.SentAt)
				.FirstOrDefault();

			if (messages != null)
			{
				messagesDictionary["Friends"].Add(friend, messages.Msg);
			}
		}
		foreach (var groupMembership in currentUser.GroupMemberships)
		{
			var groupMessages = groupMembership
				.Group
				.ReceivedMessages
				.Where(m => m.Sender == currentUser)
				.Select(m => new { Msg = m, IsSent = true })
				.Concat(
					groupMembership
					.Group
					.ReceivedMessages
					.Where(m => m.Sender != currentUser)
					.Select(m => new { Msg = m, IsSent = false })
				)
				.OrderByDescending(m => m.Msg.SentAt)
				.FirstOrDefault();

			if (groupMessages != null)
			{
				messagesDictionary["Groups"].Add(groupMembership.Group, groupMessages.Msg);
			}
		}

		var mergedMessages = messagesDictionary["Friends"]
			.Select(kvp => new
			{
				Type = "Friend",
				Key = kvp.Key,
				Message = kvp.Value,
				SentAt = kvp.Value.SentAt
			})
			.Concat
			(
				messagesDictionary["Groups"]
				.Select(kvp => new
				{
					Type = "Group",
					Key = kvp.Key,
					Message = kvp.Value,
					SentAt = kvp.Value.SentAt
				})
			)
			.OrderByDescending(m => m.SentAt)
			.ToList();



		@* <li class="nav-item"> *@
		@* 	<a class="nav-link text-light" asp-controller="Group" asp-action="Index"><i class="fa-solid fa-people-group"></i></a> *@
		@* </li> *@

		<li class="nav-item dropdown">
			<a class="nav-link dropdown-toggle text-light" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="bi bi-person-add"></i>
			</a>
			<ul class="dropdown-menu dropdown-menu-light dropdown-center" aria-labelledby="navbarDarkDropdownMenuLink">
				@if (currentUser.ReceivedFriendRequests.Count == 0)
				{
					<li class="dropdown-item d-flex justify-content-between align-items-start">
						No friend requests
					</li>
				} else
				{
					foreach (var friendRequest in currentUser.ReceivedFriendRequests)
					{
						<li class="dropdown-item d-flex justify-content-between align-items-start">
							<a class="flex-grow-1 me-3 text-wrap text-decoration-none text-dark" asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@friendRequest.SenderId">
								@friendRequest.Sender.FirstName @friendRequest.Sender.LastName sent you a friend request
							</a>
						</li>
					}
				}
			</ul>
		</li>

		<li class="nav-item dropdown">
			<a class="nav-link text-light dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="bi bi-people-fill"></i>
			</a>
			<ul class="dropdown-menu dropdown-menu-friends dropdown-menu-light dropdown-center" aria-labelledby="navbarDarkDropdownMenuLink">
				@if (currentUser.Friends.Count == 0)
				{
					<li class="dropdown-item">
						No friends
					</li>
				} else 
				{
					foreach (var friend in currentUser.Friends)
					{
						<li><a class="dropdown-item" asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@friend.Id">@friend.FirstName @friend.LastName</a></li>
					}
				}
			</ul>
		</li>

		<li class="nav-item dropdown">
			<a class="nav-link text-light dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="bi bi-chat-dots-fill"></i>
			</a>
			<ul class="dropdown-menu dropdown-menu-light dropdown-center" aria-labelledby="navbarDarkDropdownMenuLink">
				@if (mergedMessages.Count == 0)
				{
					<li class="dropdown-item">
						No messages
					</li>
				} else
				{
					foreach (var item in mergedMessages)
					{
						string contentPreview;
						if (item.Message.Content.Length > 20)
						{
							contentPreview = item.Message.Content.Substring(0, 20) + "...";
						}
						else
						{
							contentPreview = item.Message.Content;
						}

						if (item.Type == "Friend")
						{
							var user = (User)item.Key;
							<li>
								<a asp-controller="Profile" asp-action="MessageBox" asp-route-profileUserId="@user.Id" class="dropdown-item">
									<strong>@user.FirstName @user.LastName</strong><br />
									@((item.Message.Sender == currentUser) ? $"You: {contentPreview}" : contentPreview)
								</a>
							</li>
						}
						else if (item.Type == "Group")
						{
							var group = (Group)item.Key;
							<li>
								<a asp-controller="Group" asp-action="MessageBox" asp-route-groupId="@group.Id" class="dropdown-item">
									<strong>@group.Name</strong><br />
									@((item.Message.Sender == currentUser) ? $"You: {contentPreview}" : $"{item.Message.Sender.FirstName} {item.Message.Sender.LastName}: {contentPreview}")
								</a>
							</li>
						}
					}
				}
			</ul>
		</li>


		<li class="nav-item dropdown">
			@{
				var unreadNotifications = currentUser.Notifications.FindAll(notification => notification.IsRead == false).Count;
			}
			<a class="nav-link text-light position-relative dropdown-toggle" href="#" id="navbarDarkDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">
				<i class="bi bi-bell-fill"></i>
				@if (unreadNotifications > 0)
				{
					<span class="position-absolute translate-middle badge rounded-pill bg-danger">
						@unreadNotifications
					</span>
				}
			</a>
			<ul class="dropdown-menu dropdown-menu-light dropdown-center" aria-labelledby="navbarDarkDropdownMenuLink">
				@if (currentUser.Notifications.Count == 0)
				{
					<li class="dropdown-item">
						No notifications
					</li>
				} else
				{
					foreach (var notification in currentUser.Notifications)
					{
						<li class="dropdown-item d-flex justify-content-between align-items-center">
							@if (!notification.IsRead)
							{
								<b>
									<a class="flex-grow-1 me-3 text-wrap text-decoration-none text-dark"
									asp-controller="Profile"
									asp-action="ReadNotification"
									asp-route-notificationId="@notification.Id">
										@notification.Content
									</a>
								</b>
							} else
							{
								<a class="flex-grow-1 me-3 text-wrap text-decoration-none text-dark"
								   asp-controller="Profile"
								   asp-action="ReadNotification"
								   asp-route-notificationId="@notification.Id">
									@notification.Content
								</a>
							}
							<a class="btn btn-sm btn-outline-danger"
							   asp-controller="Profile"
							   asp-action="DeleteNotification"
							   asp-route-notificationId="@notification.Id"
							   asp-route-returnUrl="@returnUrl">
								X
							</a>
						</li>
					}
				}
			</ul>
		</li>

		<li class="nav-item">
			<a id="manage" class="nav-link text-light d-block d-sm-none d-md-none d-lg-block" asp-area="" asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@currentUser.Id">
				@currentUser.FirstName @currentUser.LastName
			</a>

			<a id="manage-icon" class="nav-link text-light d-none d-sm-block d-md-block d-lg-none" asp-area="" asp-controller="Profile" asp-action="Index" asp-route-profileUserId="@currentUser.Id">
				<i class="bi bi-person-circle"></i>
			</a>
		</li>



		<li class="nav-item me-auto">
			<form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
				<button id="logout" type="submit" class="nav-link btn btn-link text-light border-0"><i class="bi bi-box-arrow-right"></i></button>
			</form>
		</li>

	}
	else
	{
		<li class="nav-item">
			<a class="nav-link text-light" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
		</li>
		<li class="nav-item">
			<a class="nav-link text-light" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
		</li>
	}
</ul>
